/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register new user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RegisterUser"];
                };
            };
            responses: {
                /** @description Registered successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserWithToken"];
                    };
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** User login */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginRequest"];
                };
            };
            responses: {
                /** @description Authenticated user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserWithToken"];
                    };
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Logged out */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Current user info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserSelf"];
                    };
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update current user */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateMe"];
                };
            };
            responses: {
                /** @description Updated current user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserSelf"];
                    };
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all users (admin only) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of users */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserAdmin"][];
                    };
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user by ID (admin only) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserAdmin"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete user by ID (admin only) */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        options?: never;
        head?: never;
        /** Update user by ID (admin only) */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateUser"];
                };
            };
            responses: {
                /** @description Updated user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserAdmin"];
                    };
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        trace?: never;
    };
    "/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all catalog items */
        get: {
            parameters: {
                query?: {
                    /** @description Items per page */
                    limit?: number;
                    /** @description Offset for pagination */
                    offset?: number;
                    /** @description Filter for featured items */
                    featured?: boolean;
                    /** @description Sort format: field:(asc|desc) */
                    sort?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of items */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount?: number;
                            items?: components["schemas"]["ItemFetch"][];
                        };
                    };
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        put?: never;
        /**
         * Add a new item
         * @description Only users with the 'admin' or 'manager' role can add items.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ItemInput"];
                };
            };
            responses: {
                /** @description Item created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ItemFetch"];
                    };
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get item by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Item found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ItemFetch"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete item by ID
         * @description Only users with the 'admin' role can delete items.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        options?: never;
        head?: never;
        /**
         * Update item by ID
         * @description Only users with the 'admin' or 'manager' role can update items.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ItemUpdate"];
                };
            };
            responses: {
                /** @description Updated item */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ItemFetch"];
                    };
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        trace?: never;
    };
    "/admin/items/{itemId}/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add media to item */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: uri
                         * @description URL to the media file.
                         */
                        url: string;
                        /** @description Type of media. */
                        type: string;
                        /** @description Order of the media for this item. */
                        order: number;
                    };
                };
            };
            responses: {
                /** @description Media added */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Media"];
                    };
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/items/{itemId}/media/{mediaId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove media from item */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media removed */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        options?: never;
        head?: never;
        /** Update media (url, type, or order) */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: uri
                         * @description New URL to the media file.
                         */
                        url?: string;
                        /** @description New type of media. */
                        type?: string;
                        /** @description New order for the media. */
                        order?: number;
                    };
                };
            };
            responses: {
                /** @description Media updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Media"];
                    };
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        trace?: never;
    };
    "/bundles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all bundles */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of bundles */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Bundle"][];
                    };
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        put?: never;
        /**
         * Create a new bundle
         * @description Only users with the 'admin' or 'manager' role can create bundles.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["BundleInput"];
                };
            };
            responses: {
                /** @description Bundle created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Bundle"];
                    };
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bundles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get bundle by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Bundle found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Bundle"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete bundle by ID
         * @description Only users with the 'admin' role can delete bundles.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Bundle deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update bundle by ID
         * @description Only users with the 'admin' or 'manager' role can update bundles.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["BundleInput"];
                };
            };
            responses: {
                /** @description Bundle updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Bundle"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/cart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user's cart
         * @description Only authenticated users can view their own cart.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User's cart */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CartItem"][];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Add item to cart
         * @description Only authenticated users can add items to their own cart.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CartInsert"];
                };
            };
            responses: {
                /** @description Added to cart */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        /**
         * Clear cart
         * @description Only authenticated users can clear their own cart.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cart cleared */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cart/items/{itemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove item from cart
         * @description Only authenticated users can remove items from their own cart.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    itemId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Item removed from cart */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        options?: never;
        head?: never;
        /**
         * Update quantity of item in cart
         * @description Only authenticated users can update items in their own cart.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    itemId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        quantity: number;
                    };
                };
            };
            responses: {
                /** @description Updated cart item */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CartItem"];
                    };
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        trace?: never;
    };
    "/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all orders
         * @description Only users with the 'admin' or 'manager' role can view all orders.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of orders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Order"][];
                    };
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        put?: never;
        /**
         * Place new order
         * @description Place a new order. Requires authentication. Payment is processed via an external service (e.g., Stripe).
         *     Customers can only place orders for themselves. Admins and managers may place orders on behalf of any user.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["NewOrder"];
                };
            };
            responses: {
                /** @description Order created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Order"];
                    };
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get order by ID
         * @description Customers may only access their own orders. Admins and managers can access any order.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Order found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Order"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update order status
         * @description Only users with the 'admin' or 'manager' role can update order status.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status: "pending" | "processing" | "shipped" | "delivered" | "cancelled";
                    };
                };
            };
            responses: {
                /** @description Order status updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Order"];
                    };
                };
                400: components["responses"]["CommonErrorResponses"];
                401: components["responses"]["CommonErrorResponses"];
                403: components["responses"]["CommonErrorResponses"];
                404: components["responses"]["CommonErrorResponses"];
                500: components["responses"]["CommonErrorResponses"];
            };
        };
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BaseItemFields: {
            /** @description Name of the item. */
            itemName?: string;
            /** @description Description of the item. */
            description?: string;
            /**
             * Format: float
             * @description Price of the item.
             */
            price?: number;
        };
        BaseBundleFields: {
            /** @description Name of the bundle. */
            bundleName?: string;
            /** @description Description of the bundle. */
            description?: string;
            /**
             * Format: float
             * @description Total price of the bundle.
             */
            price?: number;
        };
        /**
         * @description Role of the user in the system.
         * @enum {string}
         */
        UserRole: "customer" | "manager" | "admin";
        /**
         * @description Current status of the order.
         * @enum {string}
         */
        OrderStatus: "pending" | "processing" | "shipped" | "delivered" | "cancelled";
        /**
         * @description Category of the item in the store.
         * @enum {string}
         */
        ItemCategory: "genericItem" | "moduleItem" | "accessoryItem";
        /**
         * @description Type of the item.
         * @enum {string}
         */
        ItemType: "basic" | "auto" | "general";
        /**
         * @description Frame color for module items.
         * @enum {string}
         */
        FrameColor: "white" | "black" | "silver";
        /**
         * @description Base material for surface modules.
         * @enum {string}
         */
        BaseMaterial: "whitePolymer" | "blackPolymer" | "woodOak" | "woodMaple" | "woodPine";
        /**
         * @description Size of the module item.
         * @enum {string}
         */
        ModuleSize: "small" | "medium" | "large";
        /**
         * @description Controller type for module items.
         * @enum {string}
         */
        ControllerType: "remote" | "app";
        /**
         * @description Media type for media items.
         * @enum {string}
         */
        MediaType: "image" | "video";
        /**
         * @description Module package type for generic items.
         * @enum {string}
         */
        ModulePackage: "custom" | "basic" | "minimal";
        /** @description User's own information. */
        UserSelf: {
            /**
             * Format: int64
             * @description Unique identifier for the user.
             */
            id: number;
            /**
             * Format: email
             * @description User's email address.
             */
            email: string;
            /** @description Unique username for the user. */
            username: string;
            /** @description User's default shipping address (nullable). */
            address?: components["schemas"]["UserAddress"];
            /**
             * Format: date-time
             * @description Last login timestamp.
             */
            lastLogin?: string | null;
            /**
             * Format: date-time
             * @description Account creation timestamp.
             */
            createdAt: string;
        };
        /** @description User information for admin queries. */
        UserAdmin: WithRequired<components["schemas"]["UserSelf"], "id" | "email" | "username" | "createdAt"> & {
            userRole: components["schemas"]["UserRole"];
            isActive: boolean;
            isVerified: boolean;
            /** @description Password reset token (for password reset flows; not returned in normal user queries). */
            passwordResetToken?: string | null;
        };
        /** @description Base fields for user. */
        UserInputBase: {
            /**
             * Format: email
             * @description User's email address.
             */
            email?: string;
            /** @description Unique username for the user. */
            username?: string;
            /** @description User's default shipping address. */
            address?: components["schemas"]["UserAddress"];
        };
        /** @description Request body for user registration. */
        RegisterUser: WithRequired<components["schemas"]["UserInputBase"], "email" | "username"> & {
            /** @description Unique username for the user. */
            username: string;
            /**
             * Format: password
             * @description User's password (write-only, min 8 characters)
             */
            password: string;
        };
        /** @description Request body for user login. */
        LoginRequest: {
            /**
             * Format: email
             * @description User's email address.
             */
            email: string;
            /**
             * Format: password
             * @description User's password (write-only, min 8 characters)
             */
            password: string;
        };
        /** @description Request body for user creation (by admin). */
        CreateUser: WithRequired<components["schemas"]["UserInputBase"], "email" | "username"> & {
            /**
             * Format: password
             * @description User's password (write-only, min 8 characters)
             */
            password: string;
            /** @description Role of the user in the system. */
            userRole: components["schemas"]["UserRole"];
        };
        /** @description Request body for updating current user's info. */
        UpdateMe: {
            /** @description New username. */
            username?: string;
            /**
             * Format: email
             * @description New email address.
             */
            email?: string;
            /** @description New shipping address. */
            address?: components["schemas"]["UserAddress"];
        };
        /** @description Request body for updating any user (admin/manager). */
        UpdateUser: components["schemas"]["UpdateMe"] & {
            /**
             * Format: password
             * @description New password (write-only, min 8 characters)
             */
            password?: string;
            /** @description New role for the user. */
            userRole?: components["schemas"]["UserRole"];
            /** @description Whether the user account is active. */
            isActive?: boolean;
        };
        /** @description Request body for changing current user's password. */
        ChangePassword: {
            /**
             * Format: password
             * @description Current password (write-only)
             */
            oldPassword: string;
            /**
             * Format: password
             * @description New password (write-only)
             */
            newPassword: string;
        };
        /** @description Request body for resetting a forgotten password. */
        ResetPassword: {
            /** @description Password reset token. */
            token: string;
            /**
             * Format: password
             * @description New password (write-only)
             */
            newPassword: string;
        };
        /** @description Request a password-reset email. */
        ForgotPasswordRequest: {
            /**
             * Format: email
             * @description User's email address.
             */
            email: string;
        };
        /** @description User's shipping address. */
        UserAddress: {
            /** @description Street address. */
            street: string;
            /** @description City. */
            city: string;
            /** @description ZIP or postal code. */
            zip: string;
            /** @description Country. */
            country: string;
            /**
             * Format: phone
             * @description Contact phone number for the address.
             */
            phone?: string;
        };
        /** @description Authenticated user with JWT token. */
        UserWithToken: {
            user: components["schemas"]["UserSelf"];
            /**
             * Format: jwt
             * @description JWT access token
             */
            token: string;
        };
        /** @description Base fields for all items. */
        ItemBase: {
            /** @description Unique identifier for the item. */
            readonly id?: number;
            /** @description Discriminator for item type. */
            kind?: string;
            /** @description Name of the item. */
            itemName: string;
            /** @description Description of the item. */
            description?: string;
            /**
             * Format: float
             * @description Price of the item.
             */
            price: number;
            /** @description List of media objects for the item, ordered by the 'order' field. */
            itemMedia?: components["schemas"]["Media"][];
            /** @description Category of the item. */
            itemCategory: components["schemas"]["ItemCategory"];
            /** @description Type of the item. */
            itemType: components["schemas"]["ItemType"];
            /** @description Whether the item is in stock. */
            inStock: boolean;
            /** @description Frame color of the item. */
            frameColor?: components["schemas"]["FrameColor"];
            /** @description Combination of modules. */
            baseStyle?: string;
            /** @description Surface material of the item. */
            baseMaterial?: components["schemas"]["BaseMaterial"];
            /** @description Whether the item is featured. */
            isFeatured?: boolean;
            /** @description Whether the item is hidden from public view. */
            isHidden?: boolean;
            /**
             * Format: date-time
             * @description Date/time the item was created.
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Date/time the item was last updated.
             */
            updatedAt?: string;
        };
        GenericItem: Omit<components["schemas"]["ItemBase"], "kind"> & {
            /**
             * @description Discriminator for GenericItem type.
             * @enum {string}
             */
            kind: "GenericItem";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            kind: "GenericItem";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            kind: "GenericItem";
        };
        /** @description Base fields for item creation/update requests. */
        BaseItemInput: {
            /** @description Name of the item. */
            itemName: string;
            /** @description Description of the item. */
            description?: string;
            /**
             * Format: float
             * @description Price of the item.
             */
            price: number;
            /** @description List of media objects for the item, ordered by the 'order' field. */
            itemMedia?: components["schemas"]["Media"][];
            /** @description Category of the item. */
            itemCategory: components["schemas"]["ItemCategory"];
            /** @description Type of the item. */
            itemType: components["schemas"]["ItemType"];
            /** @description Whether the item is in stock. */
            inStock: boolean;
            /** @description Frame color of the item. */
            frameColor?: components["schemas"]["FrameColor"];
            /** @description Combination of modules. */
            baseStyle?: string;
            /** @description Surface material of the item. */
            baseMaterial?: components["schemas"]["BaseMaterial"];
            /** @description Whether the item is featured. */
            isFeatured?: boolean;
            /** @description Whether the item is hidden from public view. */
            isHidden?: boolean;
        };
        GenericItemInput: components["schemas"]["BaseItemInput"] & {
            /**
             * @description Discriminator for GenericItem type.
             * @enum {string}
             */
            kind: "GenericItem";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            kind: "GenericItem";
        };
        ModuleItem: Omit<components["schemas"]["ItemBase"], "kind"> & {
            /**
             * @description Discriminator for ModuleItem type.
             * @enum {string}
             */
            kind: "ModuleItem";
            /** @description Size of the module item. */
            moduleSize?: components["schemas"]["ModuleSize"];
            /** @description Color of the module item. */
            moduleColor?: string;
            /** @description Controller type for the module item. */
            moduleController?: components["schemas"]["ControllerType"];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            kind: "ModuleItem";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            kind: "ModuleItem";
        };
        ModuleItemInput: components["schemas"]["BaseItemInput"] & {
            /**
             * @description Discriminator for ModuleItem type.
             * @enum {string}
             */
            kind: "ModuleItem";
            /** @description Size of the module item. */
            moduleSize?: components["schemas"]["ModuleSize"];
            /** @description Color of the module item. */
            moduleColor?: string;
            /** @description Controller type for the module item. */
            moduleController?: components["schemas"]["ControllerType"];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            kind: "ModuleItem";
        };
        AccessoryItem: Omit<components["schemas"]["ItemBase"], "kind"> & {
            /**
             * @description Discriminator for AccessoryItem type.
             * @enum {string}
             */
            kind?: "AccessoryItem";
            /** @description Size of the accessory item. */
            accessorySize?: components["schemas"]["ModuleSize"];
            /** @description Material of the accessory item. */
            accessoryMaterial?: string;
            /** @description Color of the accessory item. */
            accessoryColor?: string;
            /** @description Style of the accessory item. */
            accessoryStyle?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            kind: "AccessoryItem";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            kind: "AccessoryItem";
        };
        AccessoryItemInput: components["schemas"]["BaseItemInput"] & {
            /**
             * @description Discriminator for AccessoryItem type.
             * @enum {string}
             */
            kind: "AccessoryItem";
            /** @description Size of the accessory item. */
            accessorySize?: components["schemas"]["ModuleSize"];
            /** @description Material of the accessory item. */
            accessoryMaterial?: string;
            /** @description Color of the accessory item. */
            accessoryColor: string;
            /** @description Style of the accessory item. */
            accessoryStyle?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            kind: "AccessoryItem";
        };
        ItemFetch: components["schemas"]["GenericItem"] | components["schemas"]["ModuleItem"] | components["schemas"]["AccessoryItem"];
        ItemInput: components["schemas"]["GenericItemInput"] | components["schemas"]["ModuleItemInput"] | components["schemas"]["AccessoryItemInput"];
        ItemUpdate: components["schemas"]["BaseItemFields"] & {
            /** @description New stock status of the item. */
            inStock?: boolean;
            /** @description New featured status of the item. */
            isFeatured?: boolean;
            /** @description New hidden status of the item. */
            isHidden?: boolean;
            /** @description New frame color of the item. */
            frameColor?: components["schemas"]["FrameColor"];
            /** @description New surface material of the item. */
            surfaceMaterial?: string;
            /** @description New size of the module item. */
            size?: components["schemas"]["ModuleSize"];
            /** @description New material of the module item. */
            material?: string;
            /** @description New color of the module item. */
            color?: string;
            /** @description New style of the module item. */
            style?: string;
            /** @description New controller type for the module item. */
            controller?: components["schemas"]["ControllerType"];
        };
        Bundle: components["schemas"]["BaseBundleFields"] & {
            /** @description Unique identifier for the bundle. */
            id: number;
            /** @description List of item IDs included in the bundle. */
            itemIds: number[];
            /**
             * Format: date-time
             * @description Date/time the bundle was created.
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Date/time the bundle was last updated.
             */
            updatedAt?: string;
        };
        BundleInput: components["schemas"]["BaseBundleFields"] & {
            /** @description List of item IDs to include. */
            itemIds: number[];
        };
        /** @description An item in the user's shopping cart. */
        CartItem: {
            /** @description ID of the item in the cart. */
            itemId: number;
            /** @description Quantity of the item in the cart. */
            quantity: number;
            /**
             * Format: date-time
             * @description Date/time the item was added to the cart.
             */
            addedAt?: string;
            /** @description Details of the item in the cart. */
            itemDetails?: components["schemas"]["ItemFetch"];
        };
        /** @description Request body for adding an item to the cart. */
        CartInsert: {
            /** @description ID of the item to add. */
            itemId: number;
            /** @description Quantity of the item to add. */
            quantity: number;
        };
        /** @description Request body for placing a new order. */
        NewOrder: {
            /** @description Shipping address for the order. */
            shippingAddress: components["schemas"]["UserAddress"];
            /** @description List of items in the order. */
            items: components["schemas"]["OrderItemInput"][];
        };
        /** @description An order placed by a user. */
        Order: {
            /** @description Unique identifier for the order. */
            id?: number;
            /** @description ID of the user who placed the order. */
            userId?: number;
            /** @description Current status of the order. */
            status?: components["schemas"]["OrderStatus"];
            /**
             * Format: float
             * @description Total price of the order.
             */
            total?: number;
            /** @description Shipping address for the order. */
            shippingAddress?: components["schemas"]["UserAddress"];
            /**
             * Format: date-time
             * @description Date/time the order was created.
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Date/time the order was last updated.
             */
            updatedAt?: string;
            /** @description List of items in the order. */
            items?: components["schemas"]["OrderItem"][];
        };
        /** @description An item included in an order. */
        OrderItem: {
            /** @description ID of the item. */
            itemId?: number;
            /** @description Quantity of the item. */
            quantity?: number;
            /**
             * Format: float
             * @description Price of the item at the time of purchase.
             */
            priceAtPurchase?: number;
            /** @description Name of the item. */
            itemName?: string;
            /** @description Snapshot of the item details at purchase time. */
            itemSnapshot?: {
                /** @description Name of the item. */
                itemName?: string;
                /**
                 * Format: float
                 * @description Price of the item.
                 */
                price?: number;
            };
        };
        /** @description Request body for adding an item to an order. */
        OrderItemInput: {
            /** @description ID of the item to order. */
            itemId: number;
            /** @description Quantity to order. */
            quantity: number;
        };
        /** @description Media file associated with an item (image, video, etc.). */
        Media: {
            /** @description Unique identifier for the media. */
            readonly id: number;
            /** @description Item ID this media belongs to. */
            itemId: number;
            /**
             * Format: uri
             * @description URL to the media file.
             */
            url: string;
            /** @description Type of media. */
            type: string;
            /** @description Order of the media for this item. */
            order: number;
            /**
             * Format: date-time
             * @description Date/time the media was created.
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description Date/time the media was last updated.
             */
            updatedAt?: string;
        };
        /** @description Standard error response. */
        ErrorResponse: {
            /** @description Error message. */
            message: string;
            /** @description Error code. */
            code: number;
        };
    };
    responses: {
        /** @description Common error responses */
        CommonErrorResponses: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
export type operations = Record<string, never>;
