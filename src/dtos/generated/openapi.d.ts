/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register new user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RegisterUser"];
                };
            };
            responses: {
                /** @description Registered successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** User login */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginRequest"];
                };
            };
            responses: {
                /** @description Authenticated user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Logged out */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Current user info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update current user */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateMe"];
                };
            };
            responses: {
                /** @description Updated current user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all users (admin only) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of users */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user by ID (admin only) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete user by ID (admin only) */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update user by ID (admin only) */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateUser"];
                };
            };
            responses: {
                /** @description Updated user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all catalog items */
        get: {
            parameters: {
                query?: {
                    /** @description Items per page */
                    limit?: number;
                    /** @description Items to skip */
                    offset?: number;
                    /** @description Filter by category */
                    category?: components["schemas"]["ItemCategory"];
                    /** @description Filter by item type */
                    type?: components["schemas"]["ItemType"];
                    /** @description Only items in stock */
                    in_stock?: boolean;
                    /** @description Sort format: field:(asc|desc) */
                    sort?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of items */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            total_count?: number;
                            items?: components["schemas"]["ItemFetch"][];
                        };
                    };
                };
            };
        };
        put?: never;
        /** Add a new item */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ItemInput"];
                };
            };
            responses: {
                /** @description Item created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ItemFetch"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get item by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Item found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ItemFetch"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete item by ID */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update item by ID */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ItemUpdate"];
                };
            };
            responses: {
                /** @description Updated item */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ItemFetch"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/packages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all packages */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of packages */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Package"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new package */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PackageInput"];
                };
            };
            responses: {
                /** @description Created package */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Package"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/packages/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get package by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Package found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Package"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete package by ID */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update package by ID */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PackageInput"];
                };
            };
            responses: {
                /** @description Updated package */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Package"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/cart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user's cart */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User's cart */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CartItem"][];
                    };
                };
            };
        };
        put?: never;
        /** Add item to cart */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CartInsert"];
                };
            };
            responses: {
                /** @description Added to cart */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Clear cart */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cart cleared */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cart/items/{itemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove item from cart */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    itemId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Item removed from cart */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update quantity of item in cart */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    itemId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        quantity: number;
                    };
                };
            };
            responses: {
                /** @description Updated cart item */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CartItem"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user's orders */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of orders */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Order"][];
                    };
                };
            };
        };
        put?: never;
        /** Place new order */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["NewOrder"];
                };
            };
            responses: {
                /** @description Order placed */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Order"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get order by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Order details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Order"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update order status */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status: "pending" | "processing" | "shipped" | "delivered" | "cancelled";
                    };
                };
            };
            responses: {
                /** @description Status updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        RegisterUser: {
            username: string;
            /** Format: email */
            email: string;
            /** Format: password */
            password: string;
        };
        LoginRequest: {
            /** Format: email */
            email: string;
            /** Format: password */
            password: string;
        };
        UpdateMe: {
            username?: string;
            /** Format: email */
            email?: string;
            /** Format: password */
            password?: string;
        };
        UpdateUser: {
            username?: string;
            /** Format: email */
            email?: string;
            /** @enum {string} */
            role?: "admin" | "manager" | "customer";
        };
        /** @enum {string} */
        ItemCategory: "generic_item" | "module" | "accessory";
        /** @enum {string} */
        ItemType: "basic" | "auto" | "general";
        /** @enum {string} */
        FrameColor: "white" | "black" | "silver";
        /** @enum {string} */
        ModuleSize: "small" | "medium" | "large";
        /** @enum {string} */
        ControllerType: "remote" | "app";
        /** @enum {string} */
        PackageBasic: "custom" | "basic" | "minimalistic" | "flat" | "non-slip";
        /** @enum {string} */
        PackageAuto: "reading_light" | "night_light" | "led_light" | "wireless_charger";
        Package: {
            id: number;
            name: string;
            modules: number[];
            color?: string;
            material?: string;
            is_custom?: boolean;
        };
        PackageInput: {
            name: string;
            modules: number[];
            color?: string;
            material?: string;
            is_custom?: boolean;
        };
        ItemBase: {
            id: number;
            item_name: string;
            description?: string;
            img_urls: string[];
            /** Format: float */
            price: number;
            category: components["schemas"]["ItemCategory"];
            type: components["schemas"]["ItemType"];
            package: components["schemas"]["PackageBasic"] | components["schemas"]["PackageAuto"];
            in_stock: boolean;
            frame_color?: components["schemas"]["FrameColor"];
            surface_material?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            is_featured?: boolean;
            is_hidden?: boolean;
        };
        GenericItem: components["schemas"]["ItemBase"] & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            category: "generic_item";
        };
        ModuleItem: components["schemas"]["ItemBase"] & {
            size?: components["schemas"]["ModuleSize"];
            material?: string;
            color?: string;
            style?: string;
            controller?: components["schemas"]["ControllerType"];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            category: "module";
        };
        AccessoryItem: components["schemas"]["ItemBase"] & {
            size?: components["schemas"]["ModuleSize"];
            material?: string;
            color?: string;
            style?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            category: "accessory";
        };
        ItemFetch: components["schemas"]["GenericItem"] | components["schemas"]["ModuleItem"] | components["schemas"]["AccessoryItem"];
        ItemInput: components["schemas"]["GenericItem"] | components["schemas"]["ModuleItem"] | components["schemas"]["AccessoryItem"];
        ItemUpdate: {
            item_name?: string;
            description?: string;
            /** Format: float */
            price?: number;
            in_stock?: boolean;
            is_featured?: boolean;
            is_hidden?: boolean;
            frame_color?: components["schemas"]["FrameColor"];
            surface_material?: string;
            package?: components["schemas"]["PackageBasic"] | components["schemas"]["PackageAuto"];
            size?: components["schemas"]["ModuleSize"];
            material?: string;
            color?: string;
            style?: string;
            controller?: components["schemas"]["ControllerType"];
        };
        CartItem: {
            item_id: number;
            quantity: number;
            /** Format: date-time */
            added_at?: string;
            item_details?: components["schemas"]["ItemFetch"];
        };
        CartInsert: {
            item_id: number;
            quantity: number;
        };
        NewOrder: {
            shipping_address: components["schemas"]["UserAddress"];
            items: components["schemas"]["OrderItemInput"][];
        };
        Order: {
            id?: number;
            user_id?: number;
            /** @enum {string} */
            status?: "pending" | "processing" | "shipped" | "delivered" | "cancelled";
            /** Format: float */
            total?: number;
            shipping_address?: components["schemas"]["UserAddress"];
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            items?: components["schemas"]["OrderItem"][];
        };
        OrderItem: {
            item_id?: number;
            quantity?: number;
            /** Format: float */
            price_at_purchase?: number;
            item_name?: string;
            item_snapshot?: {
                item_name?: string;
                /** Format: float */
                price?: number;
            };
        };
        OrderItemInput: {
            item_id: number;
            quantity: number;
        };
        UserAddress: {
            street: string;
            city: string;
            zip: string;
            country: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
