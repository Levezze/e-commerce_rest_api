---
openapi: 3.1.1
info:
  title: Generic Modular Store API
  version: 1.0.0
  description: REST API for a modular, extensible e-commerce store. Supports generic items, modules, accessories, packages, role-based access, and modular product design.

servers:
  - url: /api/v1
    description: Version 1

paths:
  # --- AUTH ROUTES ---
  /auth/register:
    post:
      summary: Register new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        '201':
          description: Registered successfully

  /auth/login:
    post:
      summary: User login
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authenticated user

  /auth/logout:
    post:
      summary: Logout user
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Logged out

  /auth/me:
    get:
      summary: Get current user
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user info
    patch:
      summary: Update current user
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMe'
      responses:
        '200':
          description: Updated current user

  # --- USER ROUTES ---
  /users:
    get:
      summary: Get all users (admin only)
      tags: [Users]
      security:
        - bearerAuth: []
      x-roles: [admin]
      responses:
        '200':
          description: List of users

  /users/{id}:
    get:
      summary: Get user by ID (admin only)
      tags: [Users]
      security:
        - bearerAuth: []
      x-roles: [admin]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User info
    patch:
      summary: Update user by ID (admin only)
      tags: [Users]
      security:
        - bearerAuth: []
      x-roles: [admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: Updated user
    delete:
      summary: Delete user by ID (admin only)
      tags: [Users]
      security:
        - bearerAuth: []
      x-roles: [admin]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted

  # --- ITEM ROUTES (ADMIN & PUBLIC) ---
  /items:
    get:
      summary: Get all catalog items
      tags: [Items]
      parameters:
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            minimum: 1
            default: 20
        - name: offset
          in: query
          description: Items to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: category
          in: query
          description: Filter by category
          schema:
            $ref: '#/components/schemas/ItemCategory'
        - name: type
          in: query
          description: Filter by item type
          schema:
            $ref: '#/components/schemas/ItemType'
        - name: in_stock
          in: query
          description: Only items in stock
          schema:
            type: boolean
        - name: sort
          in: query
          description: "Sort format: field:(asc|desc)"
          schema:
            type: string
            example: price:asc
      responses:
        '200':
          description: List of items
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_count:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ItemFetch'
    post:
      summary: Add a new item
      tags: [Items]
      security:
        - bearerAuth: []
      x-roles: [admin, manager]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemInput'
      responses:
        '201':
          description: Item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemFetch'

  /items/{id}:
    get:
      summary: Get item by ID
      tags: [Items]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Item found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemFetch'
        '404':
          description: Not found
    patch:
      summary: Update item by ID
      tags: [Items]
      security:
        - bearerAuth: []
      x-roles: [admin, manager]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemUpdate'
      responses:
        '200':
          description: Updated item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemFetch'
    delete:
      summary: Delete item by ID
      tags: [Items]
      security:
        - bearerAuth: []
      x-roles: [admin]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Deleted successfully

  # --- PACKAGES ---
  /packages:
    get:
      summary: Get all packages
      tags: [Packages]
      responses:
        '200':
          description: List of packages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Package'
    post:
      summary: Create a new package
      tags: [Packages]
      security:
        - bearerAuth: []
      x-roles: [admin, manager]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PackageInput'
      responses:
        '201':
          description: Created package
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'

  /packages/{id}:
    get:
      summary: Get package by ID
      tags: [Packages]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Package found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
        '404':
          description: Not found
    patch:
      summary: Update package by ID
      tags: [Packages]
      security:
        - bearerAuth: []
      x-roles: [admin, manager]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PackageInput'
      responses:
        '200':
          description: Updated package
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'
    delete:
      summary: Delete package by ID
      tags: [Packages]
      security:
        - bearerAuth: []
      x-roles: [admin]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Deleted successfully

  # --- CART ---
  /cart:
    get:
      summary: Get current user's cart
      tags: [Cart]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User's cart
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItem'
    post:
      summary: Add item to cart
      tags: [Cart]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartInsert'
      responses:
        '201':
          description: Added to cart
    delete:
      summary: Clear cart
      tags: [Cart]
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Cart cleared

  /cart/items/{itemId}:
    patch:
      summary: Update quantity of item in cart
      tags: [Cart]
      security:
        - bearerAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [quantity]
              properties:
                quantity:
                  type: integer
                  minimum: 1
      responses:
        '200':
          description: Updated cart item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
    delete:
      summary: Remove item from cart
      tags: [Cart]
      security:
        - bearerAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Item removed from cart

  # --- ORDERS ---
  /orders:
    get:
      summary: Get current user's orders
      tags: [Orders]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      summary: Place new order
      tags: [Orders]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
      responses:
        '201':
          description: Order placed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /orders/{id}:
    get:
      summary: Get order by ID
      tags: [Orders]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not found

  /orders/{id}/status:
    patch:
      summary: Update order status
      tags: [Orders]
      security:
        - bearerAuth: []
      x-roles: [admin, manager]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [pending, processing, shipped, delivered, cancelled]
      responses:
        '200':
          description: Status updated

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # --- AUTH ---
    RegisterUser:
      type: object
      required: [username, email, password]
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    UpdateMe:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    UpdateUser:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [admin, manager, customer]

    # --- ITEMS ---
    ItemCategory:
      type: string
      enum: [generic_item, module, accessory]
    ItemType:
      type: string
      enum: [basic, auto, general]
    FrameColor:
      type: string
      enum: [white, black, silver]
    ModuleSize:
      type: string
      enum: [small, medium, large]
    ControllerType:
      type: string
      enum: [remote, app]
    PackageBasic:
      type: string
      enum: [custom, basic, minimalistic, flat, non-slip]
    PackageAuto:
      type: string
      enum: [reading_light, night_light, led_light, wireless_charger]
    Package:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        modules:
          type: array
          items:
            type: integer
        color:
          type: string
        material:
          type: string
        is_custom:
          type: boolean
      required: [id, name, modules]
    PackageInput:
      type: object
      required: [name, modules]
      properties:
        name:
          type: string
        modules:
          type: array
          items:
            type: integer
        color:
          type: string
        material:
          type: string
        is_custom:
          type: boolean
    ItemBase:
      type: object
      properties:
        id:
          type: integer
        item_name:
          type: string
        description:
          type: string
        img_urls:
          type: array
          items:
            type: string
            format: uri
        price:
          type: number
          format: float
        category:
          $ref: '#/components/schemas/ItemCategory'
        type:
          $ref: '#/components/schemas/ItemType'
        package:
          oneOf:
            - $ref: '#/components/schemas/PackageBasic'
            - $ref: '#/components/schemas/PackageAuto'
        in_stock:
          type: boolean
        frame_color:
          $ref: '#/components/schemas/FrameColor'
        surface_material:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        is_featured:
          type: boolean
        is_hidden:
          type: boolean
      required:
        - id
        - item_name
        - price
        - category
        - type
        - package
        - in_stock
        - img_urls
    GenericItem:
      allOf:
        - $ref: '#/components/schemas/ItemBase'
    ModuleItem:
      allOf:
        - $ref: '#/components/schemas/ItemBase'
        - type: object
          properties:
            size:
              $ref: '#/components/schemas/ModuleSize'
            material:
              type: string
            color:
              type: string
            style:
              type: string
            controller:
              $ref: '#/components/schemas/ControllerType'
    AccessoryItem:
      allOf:
        - $ref: '#/components/schemas/ItemBase'
        - type: object
          properties:
            size:
              $ref: '#/components/schemas/ModuleSize'
            material:
              type: string
            color:
              type: string
            style:
              type: string
    ItemFetch:
      oneOf:
        - $ref: '#/components/schemas/GenericItem'
        - $ref: '#/components/schemas/ModuleItem'
        - $ref: '#/components/schemas/AccessoryItem'
      discriminator:
        propertyName: category
        mapping:
          generic_item: '#/components/schemas/GenericItem'
          module: '#/components/schemas/ModuleItem'
          accessory: '#/components/schemas/AccessoryItem'
    ItemInput:
      oneOf:
        - $ref: '#/components/schemas/GenericItem'
        - $ref: '#/components/schemas/ModuleItem'
        - $ref: '#/components/schemas/AccessoryItem'
      discriminator:
        propertyName: category
    ItemUpdate:
      type: object
      properties:
        item_name: {type: string}
        description: {type: string}
        price: {type: number, format: float}
        in_stock: {type: boolean}
        is_featured: {type: boolean}
        is_hidden: {type: boolean}
        frame_color: {$ref: '#/components/schemas/FrameColor'}
        surface_material: {type: string}
        package:
          oneOf:
            - $ref: '#/components/schemas/PackageBasic'
            - $ref: '#/components/schemas/PackageAuto'
        size: {$ref: '#/components/schemas/ModuleSize'}
        material: {type: string}
        color: {type: string}
        style: {type: string}
        controller: {$ref: '#/components/schemas/ControllerType'}

    # --- CART ---
    CartItem:
      type: object
      properties:
        item_id:
          type: integer
        quantity:
          type: integer
          minimum: 1
        added_at:
          type: string
          format: date-time
        item_details:
          $ref: '#/components/schemas/ItemFetch'
      required: [item_id, quantity]
    CartInsert:
      type: object
      required: [item_id, quantity]
      properties:
        item_id:
          type: integer
        quantity:
          type: integer
          minimum: 1

    # --- ORDERS ---
    NewOrder:
      type: object
      required: [shipping_address, items]
      properties:
        shipping_address:
          $ref: '#/components/schemas/UserAddress'
        items:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/OrderItemInput'
    Order:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
        total:
          type: number
          format: float
        shipping_address:
          $ref: '#/components/schemas/UserAddress'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
    OrderItem:
      type: object
      properties:
        item_id:
          type: integer
        quantity:
          type: integer
          minimum: 1
        price_at_purchase:
          type: number
          format: float
        item_name:
          type: string
        item_snapshot:
          type: object
          properties:
            item_name: {type: string}
            price: {type: number, format: float}
    OrderItemInput:
      type: object
      required: [item_id, quantity]
      properties:
        item_id:
          type: integer
        quantity:
          type: integer
          minimum: 1
    UserAddress:
      type: object
      required: [street, city, zip, country]
      properties:
        street:
          type: string
        city:
          type: string
        zip:
          type: string
        country:
          type: string
