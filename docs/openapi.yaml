---
openapi: 3.1.1
info:
  title: Generic Modular Store API
  version: 1.0.0
  description: REST API for a modular, extensible e-commerce store. Supports generic items, modules, accessories, bundles, role-based access, and modular product design.

servers:
  - url: /api/v1
    description: Version 1

paths:
  # --- AUTH ROUTES ---
  /auth/register:
    post:
      summary: Register new user
      tags: [Auth]
      # Public, no security/x-roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        '201':
          description: Registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithToken'
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
  /auth/login:
    post:
      summary: User login
      tags: [Auth]
      # Public, no security/x-roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authenticated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithToken'
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
  /auth/logout:
    post:
      summary: Logout user
      tags: [Auth]
      security:
        - bearerAuth: []
      x-roles: [customer, admin, manager]
      responses:
        '204':
          description: Logged out
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
  /auth/me:
    get:
      summary: Get current user
      tags: [Auth]
      security:
        - bearerAuth: []
      x-roles: [customer, admin, manager]
      responses:
        '200':
          description: Current user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSelf'
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
    patch:
      summary: Update current user
      tags: [Auth]
      security:
        - bearerAuth: []
      x-roles: [customer, admin, manager]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMe'
      responses:
        '200':
          description: Updated current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSelf'
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
    /auth/change-password:
      post:
        summary: Change your own password
        tags: [Auth]
        security:
          - bearerAuth: []
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePassword'
        responses:
          '204':
            description: Password changed
    /auth/forgot-password:
      post:
        summary: Send password reset email
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForgotPasswordRequest'
        responses:
          '202':
            description: Reset email queued
    /auth/reset-password:
      post:
        summary: Reset password using token
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPassword'
        responses:
          '204':
            description: Password reset successful
  # --- USER ROUTES ---
  /users:
    get:
      summary: Get all users (admin only)
      tags: [Users]
      security:
        - bearerAuth: []
      x-roles: [admin]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserAdmin'
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
  /users/{id}:
    get:
      summary: Get user by ID (admin only)
      tags: [Users]
      security:
        - bearerAuth: []
      x-roles: [admin]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAdmin'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update user by ID (admin only)
      tags: [Users]
      security:
        - bearerAuth: []
      x-roles: [admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAdmin'
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
    delete:
      summary: Delete user by ID (admin only)
      tags: [Users]
      security:
        - bearerAuth: []
      x-roles: [admin]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
  # --- ITEM ROUTES (ADMIN & PUBLIC) ---
  /items:
    get:
      summary: Get all catalog items
      tags: [Items]
      # Public, no security/x-roles
      parameters:
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            minimum: 1
            default: 20
        - name: offset
          in: query
          description: Offset for pagination
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: featured
          in: query
          description: Filter for featured items
          schema:
            type: boolean
        - name: sort
          in: query
          description: "Sort format: field:(asc|desc)"
          schema:
            type: string
            example: price:asc
      responses:
        '200':
          description: List of items
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ItemFetch'
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
    post:
      summary: Add a new item
      tags: [Items]
      security:
        - bearerAuth: []
      x-roles: [admin, manager]
      description: Only users with the 'admin' or 'manager' role can add items.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemInput'
      responses:
        '201':
          description: Item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemFetch'
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
  /items/{id}:
    get:
      summary: Get item by ID
      tags: [Items]
      # Public, no security/x-roles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Item found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemFetch'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update item by ID
      tags: [Items]
      security:
        - bearerAuth: []
      x-roles: [admin, manager]
      description: Only users with the 'admin' or 'manager' role can update items.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemUpdate'
      responses:
        '200':
          description: Updated item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemFetch'
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
    delete:
      summary: Delete item by ID
      tags: [Items]
      security:
        - bearerAuth: []
      x-roles: [admin]
      description: Only users with the 'admin' role can delete items.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Deleted successfully
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
  /admin/items/{itemId}/media:
    post:
      summary: Add media to item
      tags: [Media, Admin]
      security:
        - bearerAuth: []
      x-roles: [admin, manager]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [url, type, order]
              properties:
                url:
                  type: string
                  format: uri
                  description: URL to the media file.
                type:
                  type: string
                  schema:
                    enum: 
                      - image
                      - video
                  description: Type of media.
                order:
                  type: integer
                  description: Order of the media for this item.
      responses:
        '201':
          description: Media added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
  /admin/items/{itemId}/media/{mediaId}:
    patch:
      summary: Update media (url, type, or order)
      tags: [Media, Admin]
      security:
        - bearerAuth: []
      x-roles: [admin, manager]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                  description: New URL to the media file.
                type:
                  type: string
                  schema:
                    enum: 
                      - image
                      - video
                  description: New type of media.
                order:
                  type: integer
                  description: New order for the media.
      responses:
        '200':
          description: Media updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
    delete:
      summary: Remove media from item
      tags: [Media, Admin]
      security:
        - bearerAuth: []
      x-roles: [admin, manager]
      responses:
        '204':
          description: Media removed
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
  # --- BUNDLES ---
  /bundles:
    get:
      summary: Get all bundles
      tags: [Bundles]
      # Public, no security/x-roles
      responses:
        '200':
          description: List of bundles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bundle'
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
    post:
      summary: Create a new bundle
      tags: [Bundles]
      security:
        - bearerAuth: []
      x-roles: [admin, manager]
      description: Only users with the 'admin' or 'manager' role can create bundles.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BundleInput'
      responses:
        '201':
          description: Bundle created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bundle'
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
  /bundles/{id}:
    get:
      summary: Get bundle by ID
      tags: [Bundles]
      # Public, no security/x-roles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Bundle found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bundle'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update bundle by ID
      tags: [Bundles]
      security:
        - bearerAuth: []
      x-roles: [admin, manager]
      description: Only users with the 'admin' or 'manager' role can update bundles.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BundleInput'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Bundle updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bundle'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete bundle by ID
      tags: [Bundles]
      security:
        - bearerAuth: []
      x-roles: [admin]
      description: Only users with the 'admin' role can delete bundles.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Bundle deleted
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- CART ---
  /cart:
    get:
      summary: Get current user's cart
      tags: [Cart]
      security:
        - bearerAuth: []
      x-roles: [customer, admin, manager]
      description: Only authenticated users can view their own cart.
      responses:
        '200':
          description: User's cart
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItem'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Add item to cart
      tags: [Cart]
      security:
        - bearerAuth: []
      x-roles: [customer, admin, manager]
      description: Only authenticated users can add items to their own cart.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartInsert'
      responses:
        '201':
          description: Added to cart
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Clear cart
      tags: [Cart]
      security:
        - bearerAuth: []
      x-roles: [customer, admin, manager]
      description: Only authenticated users can clear their own cart.
      responses:
        '204':
          description: Cart cleared
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
  /cart/items/{itemId}:
    patch:
      summary: Update quantity of item in cart
      tags: [Cart]
      security:
        - bearerAuth: []
      x-roles: [customer, admin, manager]
      description: Only authenticated users can update items in their own cart.
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [quantity]
              properties:
                quantity:
                  type: integer
                  minimum: 1
      responses:
        '200':
          description: Updated cart item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
    delete:
      summary: Remove item from cart
      tags: [Cart]
      security:
        - bearerAuth: []
      x-roles: [customer, admin, manager]
      description: Only authenticated users can remove items from their own cart.
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Item removed from cart
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
  # --- ORDERS ---
  /orders:
    get:
      summary: Get all orders
      tags: [Orders]
      security:
        - bearerAuth: []
      x-roles: [admin, manager]
      description: Only users with the 'admin' or 'manager' role can view all orders.
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
    post:
      summary: Place new order
      tags: [Orders]
      security:
        - bearerAuth: []
      x-roles: [customer, admin, manager]
      x-middlewares:
        - payment
      description: |
        Place a new order. Requires authentication. Payment is processed via an external service (e.g., Stripe).
        Customers can only place orders for themselves. Admins and managers may place orders on behalf of any user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
  /orders/{id}:
    get:
      summary: Get order by ID
      tags: [Orders]
      security:
        - bearerAuth: []
      x-roles: [customer, admin, manager]
      description: |
        Customers may only access their own orders. Admins and managers can access any order.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /orders/{id}/status:
    patch:
      summary: Update order status
      tags: [Orders]
      security:
        - bearerAuth: []
      x-roles: [admin, manager]
      description: Only users with the 'admin' or 'manager' role can update order status.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: 
                    - pending
                    - processing
                    - shipped
                    - delivered
                    - cancelled
      responses:
        '200':
          description: Order status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/CommonErrorResponses'
        '401':
          $ref: '#/components/responses/CommonErrorResponses'
        '403':
          $ref: '#/components/responses/CommonErrorResponses'
        '404':
          $ref: '#/components/responses/CommonErrorResponses'
        '500':
          $ref: '#/components/responses/CommonErrorResponses'
components:
  responses:
    CommonErrorResponses:
      description: Common error responses
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # --- BASE FIELDS FOR COMPOSITION ---
    BaseItemFields:
      type: object
      properties:
        itemName:
          type: string
          description: Name of the item.
        description:
          type: string
          description: Description of the item.
        price:
          type: number
          format: float
          description: Price of the item.
    BaseBundleFields:
      type: object
      properties:
        bundleName:
          type: string
          description: Name of the bundle.
        description:
          type: string
          description: Description of the bundle.
        price:
          type: number
          format: float
          description: Total price of the bundle.
    # --- ENUMS ---
    UserRole:
      type: string
      enum: 
        - customer
        - manager
        - admin
      description: Role of the user in the system.
    OrderStatus:
      type: string
      enum: 
        - pending
        - processing
        - shipped
        - delivered
        - cancelled
      description: Current status of the order.
    ItemCategory:
      type: string
      enum:
        - genericItem
        - moduleItem
        - accessoryItem
      description: Category of the item in the store.
    ItemType:
      type: string
      enum: 
        - basic
        - auto
        - general
      description: Type of the item.
    FrameColor:
      type: string
      enum: 
        - white
        - black
        - silver
      description: Frame color for module items.
    BaseMaterial:
      type: string
      enum: 
        - whitePolymer
        - blackPolymer
        - woodOak
        - woodMaple
        - woodPine
      description: Base material for surface modules.
    ModuleSize:
      type: string
      enum: 
        - small
        - medium
        - large
      description: Size of the module item.
    ControllerType:
      type: string
      enum: 
        - remote
        - app
      description: Controller type for module items.
    MediaType:
      type: string
      enum: 
        - image
        - video
      description: Media type for media items.
    ModulePackage:
      type: string
      enum: 
        - custom
        - basic
        - minimal
      description: Module package type for generic items.
    # --- USER ---
    UserSelf:
      type: object
      description: User's own information.
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the user.
        email:
          type: string
          format: email
          description: User's email address.
        username:
          type: string
          description: Unique username for the user.
        address:
          $ref: '#/components/schemas/UserAddress'
          description: User's default shipping address (nullable).
        lastLogin:
          type: string
          format: date-time
          nullable: true
          description: Last login timestamp.
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp.
      required: [id, email, username, createdAt]
    UserAdmin:
      type: object
      description: User information for admin queries.
      allOf:
        - $ref: '#/components/schemas/UserSelf'
        - type: object
          properties:
            userRole:
              $ref: '#/components/schemas/UserRole'
            isActive:
              type: boolean
            isVerified:
              type: boolean
            passwordResetToken:
              type: string
              nullable: true
              description: Password reset token (for password reset flows; not returned in normal user queries).
      required: [id, email, username, createdAt, updatedAt, userRole, isActive, isVerified]
    UserInputBase:
      type: object
      description: Base fields for user.
      properties: 
        email:
          type: string
          format: email
          maxLength: 100
          description: User's email address.
        username:
          type: string
          minLength: 3
          maxLength: 20
          description: Unique username for the user.
        address:
          $ref: '#/components/schemas/UserAddress'
          description: User's default shipping address.
      additionalProperties: false
    RegisterUser:
      type: object
      description: Request body for user registration.
      allOf:
        - $ref: '#/components/schemas/UserInputBase'
        - type: object
          properties:
            username:
              type: string
              description: Unique username for the user.
            password:
              type: string
              format: password
              minLength: 8
              description: User's password (write-only, min 8 characters)
              writeOnly: true
      required: [email, username, password]
      additionalProperties: false
    LoginRequest:
      type: object
      description: Request body for user login.
      properties:
        email:
          type: string
          format: email
          description: User's email address.
        password:
          type: string
          format: password
          minLength: 8
          description: User's password (write-only, min 8 characters)
          writeOnly: true
      required: [email, password]
      additionalProperties: false
    CreateUser:
      type: object
      description: Request body for user creation (by admin).
      allOf:
        - $ref: '#/components/schemas/UserInputBase'
        - type: object
          properties:
            password:
              type: string
              format: password
              minLength: 8
              description: User's password (write-only, min 8 characters)
              writeOnly: true
            userRole:
              $ref: '#/components/schemas/UserRole'
              description: Role of the user in the system.
      required: [email, username, userRole, password]
      additionalProperties: false
    UpdateMe:
      type: object
      description: Request body for updating current user's info.
      properties:
        username:
          type: string
          description: New username.
        email:
          type: string
          format: email
          description: New email address.
        address:
          $ref: '#/components/schemas/UserAddress'
          description: New shipping address.
    UpdateUser:
      type: object
      description: Request body for updating any user (admin/manager).
      allOf: 
        - $ref: '#/components/schemas/UpdateMe'
        - type: object
          properties:
            password:
              type: string
              format: password
              minLength: 8
              description: New password (write-only, min 8 characters)
              writeOnly: true
            userRole:
              $ref: '#/components/schemas/UserRole'
              description: New role for the user.
            isActive:
              type: boolean
              description: Whether the user account is active.
      additionalProperties: false
    ChangePassword:
      type: object
      description: Request body for changing current user's password.
      properties:
        oldPassword:
          type: string
          format: password
          minLength: 8
          description: Current password (write-only)
          writeOnly: true
        newPassword:
          type: string
          format: password
          minLength: 8
          description: New password (write-only)
          writeOnly: true
      required: [oldPassword, newPassword]
      additionalProperties: false
    ResetPassword:
      type: object
      description: Request body for resetting a forgotten password.
      properties:
        token:
          type: string
          description: Password reset token.
        newPassword:
          type: string
          format: password
          minLength: 8
          description: New password (write-only)
          writeOnly: true
      required: [token, newPassword]
      additionalProperties: false
    ForgotPasswordRequest:
      type: object
      description: Request a password-reset email.
      properties:
        email:
          type: string
          format: email
          description: User's email address.
      required: [email]
      additionalProperties: false
    UserAddress:
      type: object
      description: User's shipping address.
      required: [street, city, zip, country]
      properties:
        street:
          type: string
          description: Street address.
        city:
          type: string
          description: City.
        zip:
          type: string
          description: ZIP or postal code.
        country:
          type: string
          description: Country.
        phone:
          type: string
          format: phone
          minLength: 10
          maxLength: 15
          description: Contact phone number for the address.
    UserWithToken:
      type: object
      description: Authenticated user with JWT token.
      properties:
        user:
          $ref: '#/components/schemas/UserSelf'
        token:
          type: string
          format: jwt
          description: JWT access token
      required: [user, token]
    # --- ITEMS ---
    ItemBase:
      type: object
      description: Base fields for all items.
      discriminator:
        propertyName: kind
        mapping:
          GenericItem: '#/components/schemas/GenericItem'
          ModuleItem: '#/components/schemas/ModuleItem'
          AccessoryItem: '#/components/schemas/AccessoryItem'
      properties:
        id:
          type: integer
          readOnly: true
          description: Unique identifier for the item.
        kind:
          type: string
          description: Discriminator for item type.
        itemName:
          type: string
          description: Name of the item.
        description:
          type: string
          description: Description of the item.
        price:
          type: number
          format: float
          description: Price of the item.
        itemMedia:
          type: array
          items:
            $ref: '#/components/schemas/Media'
          description: List of media objects for the item, ordered by the 'order' field.
        itemCategory:
          $ref: '#/components/schemas/ItemCategory'
          description: Category of the item.
        itemType:
          $ref: '#/components/schemas/ItemType'
          description: Type of the item.
        inStock:
          type: boolean
          description: Whether the item is in stock.
        frameColor:
          $ref: '#/components/schemas/FrameColor'
          description: Frame color of the item.
        baseStyle:
          type: string
          description: Combination of modules.
        baseMaterial:
          $ref: '#/components/schemas/BaseMaterial'
          description: Surface material of the item.
        isFeatured:
          type: boolean
          description: Whether the item is featured.
        isHidden:
          type: boolean
          description: Whether the item is hidden from public view.
        createdAt:
          type: string
          format: date-time
          description: Date/time the item was created.
        updatedAt:
          type: string
          format: date-time
          description: Date/time the item was last updated.
      required:
        - itemName
        - price
        - itemCategory
        - itemType
        - inStock
    GenericItem:
      allOf:
        - $ref: '#/components/schemas/ItemBase'
        - type: object
          properties:
            kind:
              type: string
              enum: [GenericItem]
              description: Discriminator for GenericItem type.
          required:
            - kind
    BaseItemInput:
      type: object
      description: Base fields for item creation/update requests.
      properties:
        itemName:
          type: string
          description: Name of the item.
        description:
          type: string
          description: Description of the item.
        price:
          type: number
          format: float
          description: Price of the item.
        itemMedia:
          type: array
          items:
            $ref: '#/components/schemas/Media'
          description: List of media objects for the item, ordered by the 'order' field.
        itemCategory:
          $ref: '#/components/schemas/ItemCategory'
          description: Category of the item.
        itemType:
          $ref: '#/components/schemas/ItemType'
          description: Type of the item.
        inStock:
          type: boolean
          description: Whether the item is in stock.
        frameColor:
          $ref: '#/components/schemas/FrameColor'
          description: Frame color of the item.
        baseStyle:
          type: string
          description: Combination of modules.
        baseMaterial:
          $ref: '#/components/schemas/BaseMaterial'
          description: Surface material of the item.
        isFeatured:
          type: boolean
          description: Whether the item is featured.
        isHidden:
          type: boolean
          description: Whether the item is hidden from public view.
      required:
        - itemName
        - price
        - itemCategory
        - itemType
        - inStock
        
    GenericItemInput:
      allOf:
        - $ref: '#/components/schemas/BaseItemInput'
        - type: object
          properties:
            kind:
              type: string
              enum: [GenericItem]
              description: Discriminator for GenericItem type.
          required:
            - kind
    ModuleItem:
      allOf:
        - $ref: '#/components/schemas/ItemBase'
        - type: object
          properties:
            kind:
              type: string
              enum: [ModuleItem]
              description: Discriminator for ModuleItem type.
            moduleSize:
              $ref: '#/components/schemas/ModuleSize'
              description: Size of the module item.
            moduleColor:
              type: string
              description: Color of the module item.
            moduleController:
              $ref: '#/components/schemas/ControllerType'
              description: Controller type for the module item.
          required:
            - kind
    ModuleItemInput:
      allOf:
        - $ref: '#/components/schemas/BaseItemInput'
        - type: object
          properties:
            kind:
              type: string
              enum: [ModuleItem]
              description: Discriminator for ModuleItem type.
            moduleSize:
              $ref: '#/components/schemas/ModuleSize'
              description: Size of the module item.
            moduleColor:
              type: string
              description: Color of the module item.
            moduleController:
              $ref: '#/components/schemas/ControllerType'
              description: Controller type for the module item.
          required:
            - kind
    AccessoryItem:
      allOf:
        - $ref: '#/components/schemas/ItemBase'
        - type: object
          properties:
            kind:
              type: string
              enum: [AccessoryItem]
              description: Discriminator for AccessoryItem type.
            accessorySize:
              $ref: '#/components/schemas/ModuleSize'
              description: Size of the accessory item.
            accessoryMaterial:
              type: string
              description: Material of the accessory item.
            accessoryColor:
              type: string
              description: Color of the accessory item.
            accessoryStyle:
              type: string
              description: Style of the accessory item.
    AccessoryItemInput:
      allOf:
        - $ref: '#/components/schemas/BaseItemInput'
        - type: object
          properties:
            kind:
              type: string
              enum: [AccessoryItem]
              description: Discriminator for AccessoryItem type.
            accessorySize:
              $ref: '#/components/schemas/ModuleSize'
              description: Size of the accessory item.
            accessoryMaterial:
              type: string
              description: Material of the accessory item.
            accessoryColor:
              type: string
              description: Color of the accessory item.
            accessoryStyle:
              type: string
              description: Style of the accessory item.
          required:
            - kind
            - accessoryColor
    ItemFetch:
      oneOf:
        - $ref: '#/components/schemas/GenericItem'
        - $ref: '#/components/schemas/ModuleItem'
        - $ref: '#/components/schemas/AccessoryItem'
      discriminator:
        propertyName: kind
        mapping:
          GenericItem: '#/components/schemas/GenericItem'
          ModuleItem: '#/components/schemas/ModuleItem'
          AccessoryItem: '#/components/schemas/AccessoryItem'
    ItemInput:
      oneOf:
        - $ref: '#/components/schemas/GenericItemInput'
        - $ref: '#/components/schemas/ModuleItemInput'
        - $ref: '#/components/schemas/AccessoryItemInput'
      discriminator:
        propertyName: kind
        mapping:
          GenericItem: '#/components/schemas/GenericItemInput'
          ModuleItem: '#/components/schemas/ModuleItemInput'
          AccessoryItem: '#/components/schemas/AccessoryItemInput'
    ItemUpdate:
      allOf:
        - $ref: '#/components/schemas/BaseItemFields'
        - type: object
          description: Request body for updating an item.
          properties:
            inStock:
              type: boolean
              description: New stock status of the item.
            isFeatured:
              type: boolean
              description: New featured status of the item.
            isHidden:
              type: boolean
              description: New hidden status of the item.
            frameColor:
              $ref: '#/components/schemas/FrameColor'
              description: New frame color of the item.
            surfaceMaterial:
              type: string
              description: New surface material of the item.
            size:
              $ref: '#/components/schemas/ModuleSize'
              description: New size of the module item.
            material:
              type: string
              description: New material of the module item.
            color:
              type: string
              description: New color of the module item.
            style:
              type: string
              description: New style of the module item.
            controller:
              $ref: '#/components/schemas/ControllerType'
              description: New controller type for the module item.
    # --- BUNDLES ---
    Bundle:
      allOf:
        - $ref: '#/components/schemas/BaseBundleFields'
        - type: object
          description: A bundle containing a collection of items from any ItemCategory.
          properties:
            id:
              type: integer
              description: Unique identifier for the bundle.
            itemIds:
              type: array
              items:
                type: integer
              description: List of item IDs included in the bundle.
            createdAt:
              type: string
              format: date-time
              description: Date/time the bundle was created.
            updatedAt:
              type: string
              format: date-time
              description: Date/time the bundle was last updated.
          required: [id, bundleName, itemIds, price]
    BundleInput:
      allOf:
        - $ref: '#/components/schemas/BaseBundleFields'
        - type: object
          description: Request body for creating or updating a bundle.
          required: [bundleName, itemIds, price]
          properties:
            itemIds:
              type: array
              items:
                type: integer
              description: List of item IDs to include.
    # --- CART ---
    CartItem:
      type: object
      description: An item in the user's shopping cart.
      properties:
        itemId:
          type: integer
          description: ID of the item in the cart.
        quantity:
          type: integer
          minimum: 1
          description: Quantity of the item in the cart.
        addedAt:
          type: string
          format: date-time
          description: Date/time the item was added to the cart.
        itemDetails:
          $ref: '#/components/schemas/ItemFetch'
          description: Details of the item in the cart.
      required: [itemId, quantity]
    CartInsert:
      type: object
      description: Request body for adding an item to the cart.
      required: [itemId, quantity]
      properties:
        itemId:
          type: integer
          description: ID of the item to add.
        quantity:
          type: integer
          minimum: 1
          description: Quantity of the item to add.
    # --- ORDER ---
    NewOrder:
      type: object
      description: Request body for placing a new order.
      required: [shippingAddress, items]
      properties:
        shippingAddress:
          $ref: '#/components/schemas/UserAddress'
          description: Shipping address for the order.
        items:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/OrderItemInput'
          description: List of items in the order.
    Order:
      type: object
      description: An order placed by a user.
      properties:
        id:
          type: integer
          description: Unique identifier for the order.
        userId:
          type: integer
          description: ID of the user who placed the order.
        status:
          $ref: '#/components/schemas/OrderStatus'
          description: Current status of the order.
        total:
          type: number
          format: float
          description: Total price of the order.
        shippingAddress:
          $ref: '#/components/schemas/UserAddress'
          description: Shipping address for the order.
        createdAt:
          type: string
          format: date-time
          description: Date/time the order was created.
        updatedAt:
          type: string
          format: date-time
          description: Date/time the order was last updated.
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          description: List of items in the order.
    OrderItem:
      type: object
      description: An item included in an order.
      properties:
        itemId:
          type: integer
          description: ID of the item.
        quantity:
          type: integer
          minimum: 1
          description: Quantity of the item.
        priceAtPurchase:
          type: number
          format: float
          description: Price of the item at the time of purchase.
        itemName:
          type: string
          description: Name of the item.
        itemSnapshot:
          type: object
          description: Snapshot of the item details at purchase time.
          properties:
            itemName: {type: string, description: Name of the item.}
            price: {type: number, format: float, description: Price of the item.}
    OrderItemInput:
      type: object
      description: Request body for adding an item to an order.
      required: [itemId, quantity]
      properties:
        itemId:
          type: integer
          description: ID of the item to order.
        quantity:
          type: integer
          minimum: 1
          description: Quantity to order.
    Media:
      type: object
      description: Media file associated with an item (image, video, etc.).
      properties:
        id:
          type: integer
          readOnly: true
          description: Unique identifier for the media.
        itemId:
          type: integer
          description: Item ID this media belongs to.
        url:
          type: string
          format: uri
          description: URL to the media file.
        type:
          type: string
          schema:
            enum: 
              - image
              - video
          description: Type of media.
        order:
          type: integer
          description: Order of the media for this item.
        createdAt:
          type: string
          format: date-time
          description: Date/time the media was created.
        updatedAt:
          type: string
          format: date-time
          description: Date/time the media was last updated.
      required: [id, itemId, url, type, order]
    ErrorResponse:
      type: object
      description: Standard error response.
      properties:
        message:
          type: string
          description: Error message.
        code:
          type: integer
          description: Error code.
      required: [message, code]
